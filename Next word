Generate Synthetic data:
import numpy as np
import matplotlib.pyplot as plt

# Generate synthetic sine wave data
def generate_wave_data(seq_len=1000, step=0.1):
    x = np.arange(0, seq_len, step)
    y = np.sin(x)
    return x, y

# Create the wave data
x, y = generate_wave_data()

# Visualize the generated wave data
plt.plot(x, y)
plt.title('Generated Wave Data (Sine Wave)')
plt.show()
Prepare data for lstm:
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Function to create sequences
def create_sequences(data, sequence_length):
    sequences = []
    targets = []
    for i in range(len(data) - sequence_length):
        seq = data[i:i + sequence_length]
        target = data[i + sequence_length]
        sequences.append(seq)
        targets.append(target)
    return np.array(sequences), np.array(targets)

# Prepare the data
sequence_length = 50  # Number of previous data points to consider
scaler = MinMaxScaler(feature_range=(0, 1))  # Normalize data between 0 and 1
y_scaled = scaler.fit_transform(y.reshape(-1, 1))

# Create sequences and targets
X, y = create_sequences(y_scaled, sequence_length)

# Reshape X for LSTM (samples, time steps, features)
X = X.reshape((X.shape[0], X.shape[1], 1))

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Build the LSTM model
model = Sequential()

# Add an LSTM layer with 100 units
model.add(LSTM(100, activation='relu', input_shape=(sequence_length, 1)))

# Add an output layer with a single neuron (for regression task)
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Train the model
history = model.fit(X, y, epochs=20, batch_size=32, validation_split=0.2)

# Use the last sequence to predict the next value
last_sequence = y_scaled[-sequence_length:]  # The last 50 points
last_sequence = last_sequence.reshape((1, sequence_length, 1))

# Predict the next value (the "next wave")
next_wave_value = model.predict(last_sequence)

# Inverse the scaling to get the original value
next_wave_value = scaler.inverse_transform(next_wave_value)

print(f'Predicted next wave value: {next_wave_value[0][0]}')

# Plot the predicted value along with the original wave
plt.plot(x, y, label="Original Wave")
plt.scatter(x[-1] + 0.1, next_wave_value, color='red', label="Predicted Next Value")
plt.legend()
plt.show()

def predict_future(model, last_sequence, steps, sequence_length, scaler):
    predictions = []
    current_sequence = last_sequence
    
    for _ in range(steps):
        prediction = model.predict(current_sequence.reshape((1, sequence_length, 1)))
        predictions.append(prediction[0, 0])
        
        # Update the current sequence by appending the prediction
        current_sequence = np.append(current_sequence[1:], prediction, axis=0)
    
    return scaler.inverse_transform(np.array(predictions).reshape(-1, 1))

# Predict the next 50 wave values
future_predictions = predict_future(model, last_sequence, steps=50, sequence_length=sequence_length, scaler=scaler)

# Plot the original wave and the future predictions
plt.plot(x, y, label="Original Wave")
plt.plot(np.arange(x[-1] + 0.1, x[-1] + 0.1 + len(future_predictions) * 0.1, 0.1), future_predictions, color='red', label="Future Predictions")
plt.legend()
plt.show()
